/* NDS: The actual depdendencies are near line 490 */
import org.apache.tools.ant.taskdefs.condition.*
import org.gradle.internal.logging.text.*
import org.apereo.cas.metadata.*
import java.nio.file.*
import static org.gradle.internal.logging.text.StyledTextOutput.Style

buildscript {

   def isReleaseBuild = project.hasProperty("release-repo")

    repositories {
        if (project.privateRepoUrl) {
          maven {
            url project.privateRepoUrl
            credentials {
              username = project.privateRepoUsername
              password = System.env.PRIVATE_REPO_TOKEN
            }
          }
        }

        if (isReleaseBuild) {
            maven { 
                url project['release-repo'] 
                allowInsecureProtocol true
            }
        } else {
            mavenLocal()
        }
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
            mavenContent { snapshotsOnly() }
        }
        maven {
            url "https://repo.spring.io/milestone"
            mavenContent { releasesOnly() }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleFreeFairPluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${project.gradleDependencyManagementPluginVersion}"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"

        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.apereo.cas:cas-server-core-api-configuration-model:${project.'cas.version'}"
        classpath "org.apereo.cas:cas-server-core-configuration-metadata-repository:${project.'cas.version'}"
    }
}

repositories {
    if (project.privateRepoUrl) {
      maven {
        url project.privateRepoUrl
        credentials {
          username = project.privateRepoUsername
          password = System.env.PRIVATE_REPO_TOKEN
        }
      }
    }
    def isReleaseBuild = project.hasProperty("release-repo")

    if (isReleaseBuild) {
        maven { 
            url project['release-repo'] 
            allowInsecureProtocol true
        }
    } else {
        mavenLocal()
    }
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
        mavenContent { snapshotsOnly() }
    }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
    maven {
        url "https://repo.spring.io/milestone"
        mavenContent { releasesOnly() }
    }
}

apply plugin: "io.freefair.war-overlay"
apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "io.freefair.lombok"

apply from: rootProject.file("gradle/springboot.gradle")
apply from: rootProject.file("gradle/jib.gradle")
apply from: rootProject.file("gradle/tasks.gradle")


configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"
        preferProjectModules()
        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

war {
    entryCompression = ZipEntryCompression.STORED
    enabled = false
}

sourceSets {
    bootRunSources {
        resources {
            srcDirs new File("//etc/cas/templates/"), new File("${project.getProjectDir()}/src/main/resources/")
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.targetCompatibility)
    }
}

bootBuildImage {
    imageName = "${project.'containerImageOrg'}/${project.'containerImageName'}:${project.version}"
}

dependencies {
    /**
    * Do NOT modify the lines below or else you will risk breaking dependency management.
    */
    implementation enforcedPlatform("org.apereo.cas:cas-server-support-bom:${project.'cas.version'}")
    implementation platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)

    /**
     * CAS dependencies and modules may be listed here.
     *
     * There is no need to specify the version number for each dependency
     * since versions are all resolved and controlled by the dependency management
     * plugin via the CAS bom.
     **/

    implementation "org.apereo.cas:cas-server-core-api-configuration-model"
    implementation "org.apereo.cas:cas-server-webapp-init"
    implementation "org.apereo.cas:cas-server-support-json-service-registry"
	implementation "org.apereo.cas:cas-server-core-webflow"
	implementation "org.apereo.cas:cas-server-core-webflow-api"
	implementation "org.apereo.cas:cas-server-core-web-api"	
	implementation "org.apereo.cas:cas-server-core-tickets-api"
	implementation "org.apereo.cas:cas-server-support-mongo-ticket-registry"	
	implementation "org.apereo.cas:cas-server-core-services-authentication"
	implementation "org.apereo.cas:cas-server-core-authentication-api"
	implementation "org.apereo.cas:cas-server-core-util-api"
	implementation "org.apereo.cas:cas-server-core-audit-api"	
	implementation "org.apereo.cas:cas-server-support-actions"
	implementation "org.apereo.cas:cas-server-support-actions-core"
	implementation "org.apereo.cas:cas-server-support-ldap"
	implementation "org.apereo.cas:cas-server-support-ldap-core"
	implementation "org.apereo.cas:cas-server-support-pm-webflow"
	
	implementation "org.ldaptive:ldaptive:2.1.0"
	
	// these may need exclusions or adding as exclusions to other parts
	implementation "org.springframework.data:spring-data-mongodb:3.2.4"
	implementation "org.mongodb:mongodb-driver-core:4.3.1"
	implementation "org.mongodb:mongodb-driver-sync:4.3.1"
	
	// no idea why this isn't included from elsewhere
	implementation "org.slf4j:slf4j-api:1.7.32"
	implementation "org.springframework.boot:spring-boot-starter-validation"
			    
	def platformVersion = (project.hasProperty('platform-version') ? project['platform-version'] : '0.0.0-SNAPSHOT')

	// Access to the PlatformEncrypter class for passing encrypted username of expired accounts
	implementation ("com.northgateps.nds.platform:platform-shared:${platformVersion}") {
		exclude group: "org.springframework.data", module: "spring-data-mongodb"
		exclude group: "org.mongodb", module: "mongodb-driver"
	}

    if (project.hasProperty("casModules")) {
        def dependencies = project.getProperty("casModules").split(",")
        dependencies.each {
            def projectsToAdd = rootProject.subprojects.findAll {project ->
                project.name == "cas-server-core-${it}" || project.name == "cas-server-support-${it}"
            }
            projectsToAdd.each {implementation it}
        }
    }
    
    developmentOnly "org.springframework.boot:spring-boot-devtools:${project.springBootVersion}"
}

bootWar {
    def executable = project.hasProperty("executable") && Boolean.valueOf(project.getProperty("executable"))
    if (executable) {
        logger.info "Including launch script for executable WAR artifact"
        launchScript()
    } else {
        logger.info "WAR artifact is not marked as an executable"
    }

    baseName = "beis-cas"
	def baseVersion = (project.hasProperty('base-version') ? '.' + project['base-version'] : '')
    // archiveVersion = baseVersion + (project.hasProperty('build-number') ? '.' + project['build-number'] : '')
    version = baseVersion + (project.hasProperty('build-number') ? project['build-number'] : '')
    
    // set war file name based on build-number property
    def buildNumber = (project.hasProperty('build-number') ? project['build-number'] : 'dev')
	archiveName = "$baseName-$buildNumber" + ".war"
	
	// show location of war file
	logger.lifecycle "war name is $archiveName"
	
    entryCompression = ZipEntryCompression.STORED

    /*
        attachClasses = true
        classesClassifier = 'classes'
        archiveClasses = true
    */

    overlays {
        /*
            https://docs.freefair.io/gradle-plugins/current/reference/#_io_freefair_war_overlay
            Note: The "excludes" property is only for files in the war dependency.
            If a jar is excluded from the war, it could be brought back into the final war as a dependency
            of non-war dependencies. Those should be excluded via normal gradle dependency exclusions.
        */
        cas {
            from "org.apereo.cas:cas-server-webapp${project.appServer}:${project.'cas.version'}@war"
            provided = false
            excludes = ["WEB-INF/lib/servlet-api-2*.jar"]
        }
    }
}
